{
  "Html": {
    "Tags": {
      "title": "Tags",
      "body": "<a> Defines a hyperlink, <div> Defines a section in a document, <button> Defines a clickable button, <footer> Defines a footer for a document or section, <h1> to <h6> Defines HTML headings... "
    },
    "HtmlForms": {
      "title": "HTML Forms",
      "body": "An HTML form is used to collect user input. The user input is most often sent to a server for processing."
    },
    "Layout": {
      "title": "HTML Layout Elements and Techniques",
      "body": "It is common to do entire web layouts using the CSS float property. Float is easy to learn - you just need to remember how the float and clear properties work. Disadvantages: Floating elements are tied to the document flow, which may harm the flexibility. Learn more about float in our CSS Float and Clear chapter. "
    },
    "InputTypes": {
      "title": "Input Type Hidden",
      "body": "The <input type='Hidden'> defines a hidden input field (not visible to a user). A hidden field lets web developers include data that cannot be seen or modified by users when a form is submitted.A hidden field often stores what database record that needs to be updated when the form is submitted.Note: While the value is not displayed to the user in the page's content, it is visible (and can be edited) using any browser's developer tools or 'View Source' functionality. Do not use hidden inputs as a form of security!"
    }
  },
  "Css": {
    "Introduction": {
      "title": "What is CSS?",
      "body": "CSS stands for Cascading Style Sheets.CSS describes how HTML elements are to be displayed on screen, paper, or in other media. CSS saves a lot of work. It can control the layout of multiple web pages all at once. External stylesheets are stored in CSS files. "
    },
    "Property": {
      "title": "CSS Properties",
      "body": "Too many property have... background, Color, justify-content, display, border, flex-grow, flex-direction etc ...  "
    }
  },
  "JavaScript": {
    "JavaScriptIntroduction": {
      "title": "JavaScript Introduction",
      "body": "JavaScript is a lightweight, cross-platform, and interpreted scripting language. It is well-known for the development of web pages, many non-browser environments also use it. JavaScript can be used for Client-side developments as well as Server-side developments. "
    },
    "Condition": {
      "title": "JavaScript if, else, and else if",
      "body": "Use if to specify a block of code to be executed, if a specified condition is true. Use else to specify a block of code to be executed, if the same condition is false. Use else if to specify a new condition to test, if the first condition is false. Use switch to specify many alternative blocks of code to be executed. "
    }
  },
  "React": {
    "React": {
      "title": "What Is React?",
      "body": "React is a declarative, efficient, and flexible JavaScript library for building user interfaces.It lets you compose complex UIs from small and isolated pieces of code called 'components'. React has a few different kinds of components, but well start with React.Component subclasses. "
    },
    "Hook": {
      "title": "Introducing Hooks",
      "body": "Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class. Note . . . React 16.8.0 is the first release to support Hooks. When upgrading, don’t forget to update all packages, including React DOM. React Native supports Hooks since the 0.59 release of React Native. "
    },
    "Element": {
      "title": "Introducing JSX",
      "body": "This funny tag syntax is neither a string nor HTML. It is called JSX, and it is a syntax extension to JavaScript. We recommend using it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript. JSX produces React “elements”. We will explore rendering them to the DOM in the next section. Below, you can find the basics of JSX necessary to get you started. "
    }
  }
}





